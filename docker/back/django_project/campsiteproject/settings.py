"""
Django settings for campsiteproject project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import environ

LOCAL = 'local'
PRODUCTION = 'production'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = environ.Path(__file__) - 2

# load env file
env = environ.Env()
for env_name in [PRODUCTION, LOCAL]:
    env_file = os.path.join(ROOT_DIR, f'.{env_name}.env')
    if os.path.isfile(env_file):
        print(f'Loading : {env_file}')
        break
else:
    raise ValueError('django_projectディレクトリに.envファイルがありません')
env.read_env(env_file)

ENVIRONMENT = env('ENVIRONMENT')
if not (ENVIRONMENT in [PRODUCTION, LOCAL]):
    raise Exception("環境が不正な値です。.envファイルのENVIRONMENTを確認してください")


SECRET_KEY = env('DJANGO_SECRET_KEY')
DEBUG = env.get_value('DJANGO_DEBUG',bool)
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'campsite.apps.CampsiteConfig',
    'accounts.apps.AccountsConfig',
    'rest_framework'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

ROOT_URLCONF = 'campsiteproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':[BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'campsiteproject.wsgi.application'

DATABASES = {
    'default':env.db(),
}

AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_CLOUDFRONT_POLICY = env('AWS_CLOUDFRONT_POLICY')
AWS_CLOUDFRONT_SIGNATURE = env('AWS_CLOUDFRONT_SIGNATURE')
AWS_CLOUDFRONT_KEY_PAIR_ID = env('AWS_CLOUDFRONT_KEY_PAIR_ID')
SIGNATURED_COOKIE_DOMAIN = env('SIGNATURED_COOKIE_DOMAIN')

# minio or not minio
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME # Cloudfron経由でS3にアクセスするので今回は使わない
AWS_CLOUDFRONT_DOMAIN = env('AWS_CLOUDFRONT_DOMAIN')

# minio 使えば以下の条件分岐いらない
if ENVIRONMENT == LOCAL:
    STATIC_URL = '/static/'
    STATICFILES_DIRS=[os.path.join(BASE_DIR,"static"),]
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
elif ENVIRONMENT == PRODUCTION:
    # Static Files
    STATICFILES_LOCATION = 'static'
    STATIC_URL = '//%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, STATICFILES_LOCATION)
    STATICFILES_STORAGE = 'campsiteproject.custom_storages.StaticStorage'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

    # Media Files
    MEDIAFILES_LOCATION = 'media'
    MEDIA_ROOT = '/%s/' % MEDIAFILES_LOCATION
    MEDIA_URL = '//%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, MEDIAFILES_LOCATION)
    DEFAULT_FILE_STORAGE = 'campsiteproject.custom_storages.MediaStorage'


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


LOGIN_REDIRECT_URL = '/gmap/api/' #追記
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
